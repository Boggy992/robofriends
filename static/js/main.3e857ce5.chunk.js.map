{"version":3,"sources":["serviceWorker.js","Searchbox.js","Card.js","CardList.js","Scroll.js","ErrorBoundry.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Searchbox","searchField","searchChange","className","type","placeholder","onChange","Card","id","name","email","CardList","robots","cardsArray","map","user","i","key","Scroll","props","style","overflowY","overflowX","borderTop","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,sBACZC,SAAUJ,MCMXK,EAbF,SAAC,GAAwB,EAAtBC,GAAsB,EAAlBC,KAAkB,EAAZC,OCwBXC,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAKVC,EAAaD,EAAOE,KAAI,SAACC,EAAKC,GAChC,OACI,kBAAC,EAAD,CACIC,IAAKF,EAAKP,GACVA,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAK7B,OACI,6BACKG,ICbEK,EANA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,SAAUC,UAAW,kBAAmBC,OAAQ,UAAYL,EAAMM,WCmBzGC,E,kDApBX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,yCAAc,6BAAd,YAAgC,6BAAhC,KAA2C,6BAA3C,SAEJG,KAAKZ,MAAMM,a,GAhBCQ,aCgDZC,G,wDA1CX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAE/B,YAAamC,EAAMC,OAAOC,SAf1C,EAAKX,MAAQ,CACTf,OAAQ,GACRX,YAAa,IAJP,E,gEAQO,IAAD,OAChBsC,MAAM,8CACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAAEpB,OAAQ+B,S,+BAQpB,IAAD,OACCC,EAAiBb,KAAKJ,MAAMf,OAAOiC,QAAO,SAAAC,GAC5C,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKrB,MAAM1B,YAAY8C,kBAEpE,OAAgC,IAA7BhB,KAAKJ,MAAMf,OAAOqC,OACV,0CAGP,yBAAK9C,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWD,aAAe6B,KAAKI,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUvB,OAASgC,W,GAlCxBX,cCAnBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.3e857ce5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Searchbox = ({ searchField, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search for robots..' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox","import React from 'react'\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        //JSX JE OVO,SLICNO HTML ALI U JAVASCRIPTU \r\n        <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ({ robots }) => {\r\n//    nema potrebe za ovim if\r\n//    if(true) {\r\n//        throw new Error('Noooooooo')\r\n//    }\r\n    const cardsArray = robots.map((user,i) =>{\r\n        return (\r\n            <Card \r\n                key={user.id} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n            />\r\n        )\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {cardsArray}    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList ","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', overflowX: 'hidden', borderTop: '1px solid black', height: '500px' }}>{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React,{ Component } from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true }) \r\n    }\r\n    \r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooopsss...<br></br>Something<br></br>is<br></br>wrong</h1>     \r\n        }\r\n        return this.props.children  \r\n    }\r\n    \r\n}\r\n\r\nexport default ErrorBoundry","import React,{ Component } from 'react'\r\nimport Searchbox from './Searchbox'\r\nimport CardList from './CardList'\r\nimport Scroll from './Scroll'\r\nimport ErrorBoundry from './ErrorBoundry'\r\nimport './App.css'\r\n\r\nclass App  extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(res => res.json())\r\n         .then(users => {\r\n          this.setState({ robots: users })   \r\n        })\r\n    }\r\n    // uvek mora arrow function u objketu da bi upucivalo na klasu App a ne na input u Searchbox.js\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value })   \r\n    }\r\n    \r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())  \r\n        })\r\n        if(this.state.robots.length === 0) {\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            return (\r\n            <div className='tc'>\r\n                <h1>Robofriends</h1>\r\n                <Searchbox searchChange={ this.onSearchChange }/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={ filteredRobots }/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n            )    \r\n        }\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport 'tachyons'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}